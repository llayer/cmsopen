{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "engaging-appreciation",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import glob\n",
    "import importlib\n",
    "import pickle\n",
    "import shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "sticky-vietnamese",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['ht', 'aplanarity', 'sphericity', 'chargeEta', 'met', 'deltaPhiTauMet', 'mt', 'mTauJet']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cardiovascular-alpha",
   "metadata": {},
   "outputs": [],
   "source": [
    "bdt = pickle.load(open(\"syst_variation/bdt_rs5/bdt.pkl\", \"rb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "normal-thing",
   "metadata": {},
   "outputs": [],
   "source": [
    "bkg = pd.read_hdf(\"syst_variation/bdt_rs5/QCD.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "natural-basin",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal = pd.read_hdf(\"syst_variation/bdt_rs5/TTJets_centJER_signal.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "smart-circle",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "included-equity",
   "metadata": {},
   "outputs": [],
   "source": [
    "explainer = shap.TreeExplainer(bdt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "acoustic-monaco",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-13-927146817216>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-13-927146817216>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    X = pd.concat([signal[features][signal[\"train_flag\"] == \"test\"], bkg[features][bkg[\"train_flag\"] == \"test\"]], axis=0))\u001b[0m\n\u001b[0m                                                                                                                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "X = pd.concat([signal[features]x, bkg[features][bkg[\"train_flag\"] == \"test\"]], axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "automated-classroom",
   "metadata": {},
   "outputs": [],
   "source": [
    "shap_values = explainer.shap_values()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
