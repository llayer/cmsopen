{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "suited-madison",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import glob\n",
    "import importlib\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "received-majority",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aerial-milan",
   "metadata": {},
   "outputs": [],
   "source": [
    "import shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "associate-treatment",
   "metadata": {},
   "outputs": [],
   "source": [
    "t = samples[\"QCD\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "sized-government",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['ht', 'aplanarity', 'sphericity', 'chargeEta', 'met', 'deltaPhiTauMet', 'mt', 'mTauJet']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "adapted-campus",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = t[features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "brilliant-class",
   "metadata": {},
   "outputs": [],
   "source": [
    "bdt = pickle.load(open(\"syst_scale/bdt/bdt.pkl\", \"rb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "protective-display",
   "metadata": {},
   "outputs": [],
   "source": [
    "explainer = shap.TreeExplainer(bdt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "employed-formula",
   "metadata": {},
   "outputs": [],
   "source": [
    "shap_values = explainer.shap_values(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "removable-vatican",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x338.4 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, X,  plot_type=\"bar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "offensive-mount",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x338.4 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "concrete-reconstruction",
   "metadata": {},
   "source": [
    "## BDT training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "polyphonic-difficulty",
   "metadata": {},
   "outputs": [],
   "source": [
    "CAND_DIR = \"cand_loose\"\n",
    "corrections = [\"centJER\", \"jes_up\", \"jes_down\", \"jes_up_old\", \"jes_down_old\", \"jer_up\", \"jer_down\", \"tau_eup\", \"tau_edown\"]\n",
    "\n",
    "def get_samples():\n",
    "\n",
    "    files = glob.glob( CAND_DIR + \"/*.h5\")\n",
    "    samples = {}\n",
    "    for sample in files:\n",
    "        sample_name = sample.split(\"/\")[-1][:-3]\n",
    "        print(sample_name)\n",
    "        if (sample_name != \"Data\") & (sample_name != \"QCD\"):\n",
    "            for key in [\"central\", \"met_up\", \"met_down\"] + corrections:\n",
    "                samples[sample_name + \"_\" + key] = pd.read_hdf(sample, sample_name + \"_\" + key)\n",
    "        else:\n",
    "            samples[sample_name] = pd.read_hdf(sample)\n",
    "            \n",
    "    return samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "pressing-allocation",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data\n",
      "QCD\n",
      "STJets\n",
      "TTJets_bkg\n",
      "TTJets_signal\n",
      "WZJets\n"
     ]
    }
   ],
   "source": [
    "samples = get_samples()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "empty-gibson",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['Data', 'QCD', 'STJets_central', 'STJets_met_up', 'STJets_met_down', 'STJets_centJER', 'STJets_jes_up', 'STJets_jes_down', 'STJets_jes_up_old', 'STJets_jes_down_old', 'STJets_jer_up', 'STJets_jer_down', 'STJets_tau_eup', 'STJets_tau_edown', 'TTJets_bkg_central', 'TTJets_bkg_met_up', 'TTJets_bkg_met_down', 'TTJets_bkg_centJER', 'TTJets_bkg_jes_up', 'TTJets_bkg_jes_down', 'TTJets_bkg_jes_up_old', 'TTJets_bkg_jes_down_old', 'TTJets_bkg_jer_up', 'TTJets_bkg_jer_down', 'TTJets_bkg_tau_eup', 'TTJets_bkg_tau_edown', 'TTJets_signal_central', 'TTJets_signal_met_up', 'TTJets_signal_met_down', 'TTJets_signal_centJER', 'TTJets_signal_jes_up', 'TTJets_signal_jes_down', 'TTJets_signal_jes_up_old', 'TTJets_signal_jes_down_old', 'TTJets_signal_jer_up', 'TTJets_signal_jer_down', 'TTJets_signal_tau_eup', 'TTJets_signal_tau_edown', 'WZJets_central', 'WZJets_met_up', 'WZJets_met_down', 'WZJets_centJER', 'WZJets_jes_up', 'WZJets_jes_down', 'WZJets_jes_up_old', 'WZJets_jes_down_old', 'WZJets_jer_up', 'WZJets_jer_down', 'WZJets_tau_eup', 'WZJets_tau_edown'])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "samples.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bronze-seattle",
   "metadata": {},
   "outputs": [],
   "source": [
    "samples[\"TTJets_signal_centJER\"][\"pdf_up\"] = samples[\"TTJets_signal_centJER\"][\"pdf_up\"].fillna(0.)\n",
    "samples[\"TTJets_signal_centJER\"][\"pdf_down\"] = samples[\"TTJets_signal_centJER\"][\"pdf_down\"].fillna(0.)\n",
    "samples[\"TTJets_bkg_centJER\"][\"pdf_up\"] = samples[\"TTJets_bkg_centJER\"][\"pdf_up\"].fillna(0.)\n",
    "samples[\"TTJets_bkg_centJER\"][\"pdf_down\"] = samples[\"TTJets_bkg_centJER\"][\"pdf_down\"].fillna(0.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "deluxe-driver",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11235"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(samples[\"QCD\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "identified-blanket",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.20/06\n"
     ]
    }
   ],
   "source": [
    "import ml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "married-guatemala",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prepare training data\n",
      "['Jet_pt', 'Jet_px', 'Jet_py', 'Jet_pz', 'Jet_e', 'Jet_eta', 'Jet_phi', 'Jet_mass', 'Jet_csvDisc', 'Jet_flavour', 'Tau_pt', 'Tau_px', 'Tau_py', 'Tau_pz', 'Tau_e', 'Tau_eta', 'Tau_phi', 'Tau_mass', 'Tau_charge', 'MET_pt', 'MET_px', 'MET_py', 'MET_pz', 'MET_e', 'MET_met', 'event', 'run', 'luminosityBlock', 'HLT_QuadJet40_IsoPFTau40', 'HLT_QuadJet45_IsoPFTau45', 'genEvent_tmeme', 'nJets', 'Jet_nbtags', 'ht', 'aplanarity', 'sphericity', 'chargeEta', 'met', 'deltaPhiTauMet', 'mt', 'mTauJet', 'Jet_btagSF', 'Jet_btagSF_up', 'Jet_btagSF_down', 'Jet_beff', 'Jet_btag_weight1', 'Jet_btag_weight1_up', 'Jet_btag_weight1_down', 'trigger_weight', 'trigger_weight_up', 'trigger_weight_down', 'norm', 'norm_up', 'norm_down', 'train_flag']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:88: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  signal_train[\"weights\"] = signal_train['trigger_weight'] * signal_train['Jet_btag_weight1']\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:89: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  signal_train[\"weights\"] = signal_train[\"weights\"] * (1. / np.mean(signal_train[\"weights\"]))\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:92: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  bkg_train[\"weights\"] = bkg_train['btag_weight']\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:93: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  bkg_train[\"weights\"] = bkg_train[\"weights\"] * (1. / np.mean(bkg_train[\"weights\"]))\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:96: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  train_data = pd.concat([signal_train, bkg_train], axis=0)\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:97: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  test_data = pd.concat([signal_test, bkg_test], axis=0)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train model\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_97apython3/x86_64-centos7-gcc8-opt/lib/python3.7/site-packages/xgboost/core.py:587: FutureWarning: Series.base is deprecated and will be removed in a future version\n",
      "  if getattr(data, 'base', None) is not None and \\\n",
      "/cvmfs/sft.cern.ch/lcg/views/LCG_97apython3/x86_64-centos7-gcc8-opt/lib/python3.7/site-packages/xgboost/core.py:588: FutureWarning: Series.base is deprecated and will be removed in a future version\n",
      "  data.base is not None and isinstance(data, np.ndarray) \\\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Importance\n",
      "ht 0.040442035\n",
      "aplanarity 0.094627365\n",
      "sphericity 0.035212163\n",
      "chargeEta 0.10917759\n",
      "met 0.51533014\n",
      "deltaPhiTauMet 0.1477881\n",
      "mt 0.02040142\n",
      "mTauJet 0.037021138\n",
      "Predicting...\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "importlib.reload(ml)\n",
    "ml.train(samples, n_sig=4000, n_bkg=4000, ntrees=1000, lr=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "norwegian-metabolism",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['Data', 'QCD', 'STJets_central', 'STJets_met_up', 'STJets_met_down', 'STJets_centJER', 'STJets_jes_up', 'STJets_jes_down', 'STJets_jes_up_old', 'STJets_jes_down_old', 'STJets_jer_up', 'STJets_jer_down', 'STJets_tau_eup', 'STJets_tau_edown', 'TTJets_bkg_central', 'TTJets_bkg_met_up', 'TTJets_bkg_met_down', 'TTJets_bkg_centJER', 'TTJets_bkg_jes_up', 'TTJets_bkg_jes_down', 'TTJets_bkg_jes_up_old', 'TTJets_bkg_jes_down_old', 'TTJets_bkg_jer_up', 'TTJets_bkg_jer_down', 'TTJets_bkg_tau_eup', 'TTJets_bkg_tau_edown', 'TTJets_signal_central', 'TTJets_signal_met_up', 'TTJets_signal_met_down', 'TTJets_signal_centJER', 'TTJets_signal_jes_up', 'TTJets_signal_jes_down', 'TTJets_signal_jes_up_old', 'TTJets_signal_jes_down_old', 'TTJets_signal_jer_up', 'TTJets_signal_jer_down', 'TTJets_signal_tau_eup', 'TTJets_signal_tau_edown', 'WZJets_central', 'WZJets_met_up', 'WZJets_met_down', 'WZJets_centJER', 'WZJets_jes_up', 'WZJets_jes_down', 'WZJets_jes_up_old', 'WZJets_jes_down_old', 'WZJets_jer_up', 'WZJets_jer_down', 'WZJets_tau_eup', 'WZJets_tau_edown'])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "samples.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "present-installation",
   "metadata": {},
   "source": [
    "## Histograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "advised-philosophy",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plot\n",
    "import importlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "electronic-hughes",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'plot' from '/eos/home-l/llayer/cmsopen/columnar/plot.py'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importlib.reload(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "boring-circle",
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = [\n",
    "    {\"var_name\" : \"bdt\", \"bins\" : 30, \"xlow\" : 0., \"xup\" : 1., \"xtitle\" : \"bdt\"}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dependent-internet",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data bdt None\n",
      "QCD bdt None\n",
      "STJets_central bdt None\n",
      "STJets_met_up bdt None\n",
      "STJets_met_down bdt None\n",
      "STJets_centJER bdt None\n",
      "STJets_centJER bdt btag_up\n",
      "STJets_centJER bdt btag_down\n",
      "STJets_centJER bdt trigger_up\n",
      "STJets_centJER bdt trigger_down\n",
      "STJets_centJER bdt xsec_up\n",
      "STJets_centJER bdt xsec_down\n",
      "STJets_jes_up bdt None\n",
      "STJets_jes_down bdt None\n",
      "STJets_jes_up_old bdt None\n",
      "STJets_jes_down_old bdt None\n",
      "STJets_jer_up bdt None\n",
      "STJets_jer_down bdt None\n",
      "STJets_tau_eup bdt None\n",
      "STJets_tau_edown bdt None\n",
      "TTJets_bkg_central bdt None\n",
      "TTJets_bkg_met_up bdt None\n",
      "TTJets_bkg_met_down bdt None\n",
      "TTJets_bkg_centJER bdt None\n",
      "TTJets_bkg_centJER bdt btag_up\n",
      "TTJets_bkg_centJER bdt btag_down\n",
      "TTJets_bkg_centJER bdt trigger_up\n",
      "TTJets_bkg_centJER bdt trigger_down\n",
      "TTJets_bkg_centJER bdt xsec_up\n",
      "TTJets_bkg_centJER bdt xsec_down\n",
      "TTJets_bkg_centJER bdt pdf_up\n",
      "TTJets_bkg_centJER bdt pdf_down\n",
      "TTJets_bkg_jes_up bdt None\n",
      "TTJets_bkg_jes_down bdt None\n",
      "TTJets_bkg_jes_up_old bdt None\n",
      "TTJets_bkg_jes_down_old bdt None\n",
      "TTJets_bkg_jer_up bdt None\n",
      "TTJets_bkg_jer_down bdt None\n",
      "TTJets_bkg_tau_eup bdt None\n",
      "TTJets_bkg_tau_edown bdt None\n",
      "TTJets_signal_central bdt None\n",
      "TTJets_signal_met_up bdt None\n",
      "TTJets_signal_met_down bdt None\n",
      "TTJets_signal_centJER bdt None\n",
      "TTJets_signal_centJER bdt btag_up\n",
      "TTJets_signal_centJER bdt btag_down\n",
      "TTJets_signal_centJER bdt trigger_up\n",
      "TTJets_signal_centJER bdt trigger_down\n",
      "TTJets_signal_centJER bdt xsec_up\n",
      "TTJets_signal_centJER bdt xsec_down\n",
      "TTJets_signal_centJER bdt pdf_up\n",
      "TTJets_signal_centJER bdt pdf_down\n",
      "TTJets_signal_jes_up bdt None\n",
      "TTJets_signal_jes_down bdt None\n",
      "TTJets_signal_jes_up_old bdt None\n",
      "TTJets_signal_jes_down_old bdt None\n",
      "TTJets_signal_jer_up bdt None\n",
      "TTJets_signal_jer_down bdt None\n",
      "TTJets_signal_tau_eup bdt None\n",
      "TTJets_signal_tau_edown bdt None\n",
      "WZJets_central bdt None\n",
      "WZJets_met_up bdt None\n",
      "WZJets_met_down bdt None\n",
      "WZJets_centJER bdt None\n",
      "WZJets_centJER bdt btag_up\n",
      "WZJets_centJER bdt btag_down\n",
      "WZJets_centJER bdt trigger_up\n",
      "WZJets_centJER bdt trigger_down\n",
      "WZJets_centJER bdt xsec_up\n",
      "WZJets_centJER bdt xsec_down\n",
      "WZJets_jes_up bdt None\n",
      "WZJets_jes_down bdt None\n",
      "WZJets_jes_up_old bdt None\n",
      "WZJets_jes_down_old bdt None\n",
      "WZJets_jer_up bdt None\n",
      "WZJets_jer_down bdt None\n",
      "WZJets_tau_eup bdt None\n",
      "WZJets_tau_edown bdt None\n"
     ]
    }
   ],
   "source": [
    "plot.vars_to_histos(samples, variables, file_name = \"bdt_nb\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "accessory-clinic",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "continental-country",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TFile**\t\thistos/bdt_nb.root\t\n",
      " TFile*\t\thistos/bdt_nb.root\t\n",
      "  OBJ: TH1D\tTTJets_signal_centJER_bdt\tTTJets_signal_centJER_bdt : 0 at: 0xceca7fa0\n",
      "  KEY: TH1D\tData_bdt;1\tData_bdt\n",
      "  KEY: TH1D\tQCD_bdt;1\tQCD_bdt\n",
      "  KEY: TH1D\tSTJets_central_bdt;1\tSTJets_central_bdt\n",
      "  KEY: TH1D\tSTJets_met_up_bdt;1\tSTJets_met_up_bdt\n",
      "  KEY: TH1D\tSTJets_met_down_bdt;1\tSTJets_met_down_bdt\n",
      "  KEY: TH1D\tSTJets_centJER_bdt;1\tSTJets_centJER_bdt\n",
      "  KEY: TH1D\tSTJets_centJER_btag_up_bdt;1\tSTJets_centJER_bdt_btag_up\n",
      "  KEY: TH1D\tSTJets_centJER_btag_down_bdt;1\tSTJets_centJER_bdt_btag_down\n",
      "  KEY: TH1D\tSTJets_centJER_trigger_up_bdt;1\tSTJets_centJER_bdt_trigger_up\n",
      "  KEY: TH1D\tSTJets_centJER_trigger_down_bdt;1\tSTJets_centJER_bdt_trigger_down\n",
      "  KEY: TH1D\tSTJets_centJER_xsec_up_bdt;1\tSTJets_centJER_bdt_xsec_up\n",
      "  KEY: TH1D\tSTJets_centJER_xsec_down_bdt;1\tSTJets_centJER_bdt_xsec_down\n",
      "  KEY: TH1D\tSTJets_jes_up_bdt;1\tSTJets_jes_up_bdt\n",
      "  KEY: TH1D\tSTJets_jes_down_bdt;1\tSTJets_jes_down_bdt\n",
      "  KEY: TH1D\tSTJets_jes_up_old_bdt;1\tSTJets_jes_up_old_bdt\n",
      "  KEY: TH1D\tSTJets_jes_down_old_bdt;1\tSTJets_jes_down_old_bdt\n",
      "  KEY: TH1D\tSTJets_jer_up_bdt;1\tSTJets_jer_up_bdt\n",
      "  KEY: TH1D\tSTJets_jer_down_bdt;1\tSTJets_jer_down_bdt\n",
      "  KEY: TH1D\tSTJets_tau_eup_bdt;1\tSTJets_tau_eup_bdt\n",
      "  KEY: TH1D\tSTJets_tau_edown_bdt;1\tSTJets_tau_edown_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_central_bdt;1\tTTJets_bkg_central_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_met_up_bdt;1\tTTJets_bkg_met_up_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_met_down_bdt;1\tTTJets_bkg_met_down_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_bdt;1\tTTJets_bkg_centJER_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_btag_up_bdt;1\tTTJets_bkg_centJER_bdt_btag_up\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_btag_down_bdt;1\tTTJets_bkg_centJER_bdt_btag_down\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_trigger_up_bdt;1\tTTJets_bkg_centJER_bdt_trigger_up\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_trigger_down_bdt;1\tTTJets_bkg_centJER_bdt_trigger_down\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_xsec_up_bdt;1\tTTJets_bkg_centJER_bdt_xsec_up\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_xsec_down_bdt;1\tTTJets_bkg_centJER_bdt_xsec_down\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_pdf_up_bdt;1\tTTJets_bkg_centJER_bdt_pdf_up\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_pdf_down_bdt;1\tTTJets_bkg_centJER_bdt_pdf_down\n",
      "  KEY: TH1D\tTTJets_bkg_jes_up_bdt;1\tTTJets_bkg_jes_up_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_jes_down_bdt;1\tTTJets_bkg_jes_down_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_jes_up_old_bdt;1\tTTJets_bkg_jes_up_old_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_jes_down_old_bdt;1\tTTJets_bkg_jes_down_old_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_jer_up_bdt;1\tTTJets_bkg_jer_up_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_jer_down_bdt;1\tTTJets_bkg_jer_down_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_tau_eup_bdt;1\tTTJets_bkg_tau_eup_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_tau_edown_bdt;1\tTTJets_bkg_tau_edown_bdt\n",
      "  KEY: TH1D\tTTJets_signal_central_bdt;1\tTTJets_signal_central_bdt\n",
      "  KEY: TH1D\tTTJets_signal_met_up_bdt;1\tTTJets_signal_met_up_bdt\n",
      "  KEY: TH1D\tTTJets_signal_met_down_bdt;1\tTTJets_signal_met_down_bdt\n",
      "  KEY: TH1D\tTTJets_signal_centJER_bdt;1\tTTJets_signal_centJER_bdt\n",
      "  KEY: TH1D\tTTJets_signal_centJER_btag_up_bdt;1\tTTJets_signal_centJER_bdt_btag_up\n",
      "  KEY: TH1D\tTTJets_signal_centJER_btag_down_bdt;1\tTTJets_signal_centJER_bdt_btag_down\n",
      "  KEY: TH1D\tTTJets_signal_centJER_trigger_up_bdt;1\tTTJets_signal_centJER_bdt_trigger_up\n",
      "  KEY: TH1D\tTTJets_signal_centJER_trigger_down_bdt;1\tTTJets_signal_centJER_bdt_trigger_down\n",
      "  KEY: TH1D\tTTJets_signal_centJER_xsec_up_bdt;1\tTTJets_signal_centJER_bdt_xsec_up\n",
      "  KEY: TH1D\tTTJets_signal_centJER_xsec_down_bdt;1\tTTJets_signal_centJER_bdt_xsec_down\n",
      "  KEY: TH1D\tTTJets_signal_centJER_pdf_up_bdt;1\tTTJets_signal_centJER_bdt_pdf_up\n",
      "  KEY: TH1D\tTTJets_signal_centJER_pdf_down_bdt;1\tTTJets_signal_centJER_bdt_pdf_down\n",
      "  KEY: TH1D\tTTJets_signal_jes_up_bdt;1\tTTJets_signal_jes_up_bdt\n",
      "  KEY: TH1D\tTTJets_signal_jes_down_bdt;1\tTTJets_signal_jes_down_bdt\n",
      "  KEY: TH1D\tTTJets_signal_jes_up_old_bdt;1\tTTJets_signal_jes_up_old_bdt\n",
      "  KEY: TH1D\tTTJets_signal_jes_down_old_bdt;1\tTTJets_signal_jes_down_old_bdt\n",
      "  KEY: TH1D\tTTJets_signal_jer_up_bdt;1\tTTJets_signal_jer_up_bdt\n",
      "  KEY: TH1D\tTTJets_signal_jer_down_bdt;1\tTTJets_signal_jer_down_bdt\n",
      "  KEY: TH1D\tTTJets_signal_tau_eup_bdt;1\tTTJets_signal_tau_eup_bdt\n",
      "  KEY: TH1D\tTTJets_signal_tau_edown_bdt;1\tTTJets_signal_tau_edown_bdt\n",
      "  KEY: TH1D\tWZJets_central_bdt;1\tWZJets_central_bdt\n",
      "  KEY: TH1D\tWZJets_met_up_bdt;1\tWZJets_met_up_bdt\n",
      "  KEY: TH1D\tWZJets_met_down_bdt;1\tWZJets_met_down_bdt\n",
      "  KEY: TH1D\tWZJets_centJER_bdt;1\tWZJets_centJER_bdt\n",
      "  KEY: TH1D\tWZJets_centJER_btag_up_bdt;1\tWZJets_centJER_bdt_btag_up\n",
      "  KEY: TH1D\tWZJets_centJER_btag_down_bdt;1\tWZJets_centJER_bdt_btag_down\n",
      "  KEY: TH1D\tWZJets_centJER_trigger_up_bdt;1\tWZJets_centJER_bdt_trigger_up\n",
      "  KEY: TH1D\tWZJets_centJER_trigger_down_bdt;1\tWZJets_centJER_bdt_trigger_down\n",
      "  KEY: TH1D\tWZJets_centJER_xsec_up_bdt;1\tWZJets_centJER_bdt_xsec_up\n",
      "  KEY: TH1D\tWZJets_centJER_xsec_down_bdt;1\tWZJets_centJER_bdt_xsec_down\n",
      "  KEY: TH1D\tWZJets_jes_up_bdt;1\tWZJets_jes_up_bdt\n",
      "  KEY: TH1D\tWZJets_jes_down_bdt;1\tWZJets_jes_down_bdt\n",
      "  KEY: TH1D\tWZJets_jes_up_old_bdt;1\tWZJets_jes_up_old_bdt\n",
      "  KEY: TH1D\tWZJets_jes_down_old_bdt;1\tWZJets_jes_down_old_bdt\n",
      "  KEY: TH1D\tWZJets_jer_up_bdt;1\tWZJets_jer_up_bdt\n",
      "  KEY: TH1D\tWZJets_jer_down_bdt;1\tWZJets_jer_down_bdt\n",
      "  KEY: TH1D\tWZJets_tau_eup_bdt;1\tWZJets_tau_eup_bdt\n",
      "  KEY: TH1D\tWZJets_tau_edown_bdt;1\tWZJets_tau_edown_bdt\n"
     ]
    }
   ],
   "source": [
    "f.ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "processed-willow",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = ROOT.TFile(\"histos/bdt_nb.root\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "basic-plane",
   "metadata": {},
   "outputs": [],
   "source": [
    "h = f.Get(\"TTJets_signal_centJER_pdf_up_bdt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "terminal-greek",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ROOT.TH1D"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ordered-terminology",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c = ROOT.TCanvas()\n",
    "h.Draw()\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caring-delicious",
   "metadata": {},
   "source": [
    "## Stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "alpha-michigan",
   "metadata": {},
   "outputs": [],
   "source": [
    "import stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "three-interest",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaling QCD by 0.73\n",
      "Scaling TTJets_signal by 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Info in <TCanvas::Print>: png file stacks_corr/bdt_central_postfit.png has been created\n"
     ]
    }
   ],
   "source": [
    "#importlib.reload(stack)\n",
    "sample_names = [\"TTJets_bkg\", \"WZJets\", \"STJets\", \"QCD\", \"TTJets_signal\"]\n",
    "sfs = {}\n",
    "sfs[\"TTJets_signal\"] = 1.\n",
    "sfs[\"QCD\"] = 0.73\n",
    "for var in variables:\n",
    "    stack.plot( \"histos/\" + \"bdt_nb\" + \".root\", var[\"var_name\"], var[\"xtitle\"], sample_names, sfs=sfs, corr = \"central\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dried-governor",
   "metadata": {},
   "source": [
    "## Syst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "planned-butler",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "operating-frame",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = ROOT.TFile(\"histos/bdt_nb.root\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bizarre-instruction",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<ROOT.TH1D object (\"TTJets_signal_centJER_btag_down_bdt\") at 0x813fb10>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.Get(\"TTJets_signal_centJER_btag_down_bdt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "protected-favor",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'ROOT.TH1D'>\n",
      "TTJets_signal_centJER_bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "TTJets_signal_centJER_btag_up_bdt\n",
      "TTJets_signal_centJER_btag_down_bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "bdt bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "TTJets_signal_centJER_trigger_up_bdt\n",
      "TTJets_signal_centJER_trigger_down_bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "bdt bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "TTJets_signal_centJER_xsec_up_bdt\n",
      "TTJets_signal_centJER_xsec_down_bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "bdt bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "TTJets_signal_centJER_pdf_up_bdt\n",
      "TTJets_signal_centJER_pdf_down_bdt\n",
      "<class 'ROOT.TH1D'>\n",
      "bdt bdt\n",
      "bdt bdt\n",
      "bdt bdt\n",
      "bdt bdt\n",
      "bdt bdt\n",
      "bdt bdt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_btag.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_trigger.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_xsec.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_pdf.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_JES.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_JER.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_Tau Scale.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_JES old.png has been created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Info in <TCanvas::Print>: png file syst/bdt_JES old.png has been created\n"
     ]
    }
   ],
   "source": [
    "importlib.reload(plot)\n",
    "plot.syst(variables, sample = \"TTJets_signal\", file_name = \"bdt_nb\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "august-priority",
   "metadata": {},
   "outputs": [],
   "source": [
    "TTJets_signal_centJER_btag_up_bdt\n",
    "TTJets_signal_centJER_btag_up_bdt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ahead-speaker",
   "metadata": {},
   "source": [
    "## Fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "protective-routine",
   "metadata": {},
   "outputs": [],
   "source": [
    "import fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "challenging-rogers",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_bdt\n",
      "TTJets_bkg 143.2548703377998\n",
      "WZJets_centJER_bdt\n",
      "WZJets 63.342947935142455\n",
      "STJets_centJER_bdt\n",
      "STJets 30.165996274894944\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_bdt\n",
      "TTJets_signal 347.1281179556397\n",
      "scale factor TTbar tau(h) QQ  0.9214735847990575 +- 0.07791342052562594\n",
      "scale factor MultiJet  0.7326753274979056 +- 0.007111731405152924\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_jes_up_bdt\n",
      "TTJets_bkg 145.76828344086593\n",
      "WZJets_jes_up_bdt\n",
      "WZJets 65.15419346825847\n",
      "STJets_jes_up_bdt\n",
      "STJets 30.935160310569525\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_jes_up_bdt\n",
      "TTJets_signal 354.6369360690969\n",
      "scale factor TTbar tau(h) QQ  0.9073829655543513 +- 0.07655581246915763\n",
      "scale factor MultiJet  0.7308304839992089 +- 0.007138967704910655\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_jes_down_bdt\n",
      "TTJets_bkg 140.42892027660224\n",
      "WZJets_jes_down_bdt\n",
      "WZJets 62.434014152392876\n",
      "STJets_jes_down_bdt\n",
      "STJets 29.514357300815963\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_jes_down_bdt\n",
      "TTJets_signal 338.2703270110728\n",
      "scale factor TTbar tau(h) QQ  0.9379497171282354 +- 0.07949900052962246\n",
      "scale factor MultiJet  0.7345094979434348 +- 0.007071293333881077\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_jes_up_old_bdt\n",
      "TTJets_bkg 147.463326280664\n",
      "WZJets_jes_up_old_bdt\n",
      "WZJets 66.4911658280238\n",
      "STJets_jes_up_old_bdt\n",
      "STJets 31.56016812844896\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_jes_up_old_bdt\n",
      "TTJets_signal 358.2458555049086\n",
      "scale factor TTbar tau(h) QQ  0.9055324626482582 +- 0.07623309314167208\n",
      "scale factor MultiJet  0.729182113143846 +- 0.007181216127854186\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_jes_down_old_bdt\n",
      "TTJets_bkg 139.13871781848383\n",
      "WZJets_jes_down_old_bdt\n",
      "WZJets 61.9438785964927\n",
      "STJets_jes_down_old_bdt\n",
      "STJets 29.090571140883306\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_jes_down_old_bdt\n",
      "TTJets_signal 333.60369320318875\n",
      "scale factor TTbar tau(h) QQ  0.9433344245523222 +- 0.08026744110830779\n",
      "scale factor MultiJet  0.7357676702854434 +- 0.007041149235886098\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_jer_up_bdt\n",
      "TTJets_bkg 139.79736919251792\n",
      "WZJets_jer_up_bdt\n",
      "WZJets 64.19386104683738\n",
      "STJets_jer_up_bdt\n",
      "STJets 29.560848249013887\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_jer_up_bdt\n",
      "TTJets_signal 344.6999722109652\n",
      "scale factor TTbar tau(h) QQ  0.926566087047167 +- 0.07823832158273655\n",
      "scale factor MultiJet  0.7336466184508784 +- 0.007091433828179779\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_jer_down_bdt\n",
      "TTJets_bkg 146.26629469151203\n",
      "WZJets_jer_down_bdt\n",
      "WZJets 63.68873397380727\n",
      "STJets_jer_down_bdt\n",
      "STJets 30.96679368035005\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_jer_down_bdt\n",
      "TTJets_signal 349.18047045653304\n",
      "scale factor TTbar tau(h) QQ  0.9169003961745567 +- 0.07754441286829675\n",
      "scale factor MultiJet  0.7315045874963195 +- 0.0071198974603599256\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_tau_eup_bdt\n",
      "TTJets_bkg 148.7911971380711\n",
      "WZJets_tau_eup_bdt\n",
      "WZJets 62.30991450734996\n",
      "STJets_tau_eup_bdt\n",
      "STJets 30.820839777387814\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_tau_eup_bdt\n",
      "TTJets_signal 353.51199224690765\n",
      "scale factor TTbar tau(h) QQ  0.9010504163419091 +- 0.07620236492693017\n",
      "scale factor MultiJet  0.7316706285830932 +- 0.007083467115396422\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_tau_edown_bdt\n",
      "TTJets_bkg 134.84316469577465\n",
      "WZJets_tau_edown_bdt\n",
      "WZJets 63.532626409522535\n",
      "STJets_tau_edown_bdt\n",
      "STJets 28.76702944141954\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_tau_edown_bdt\n",
      "TTJets_signal 329.916166797164\n",
      "scale factor TTbar tau(h) QQ  0.9812991582128759 +- 0.08251996522400026\n",
      "scale factor MultiJet  0.7341856938604716 +- 0.007158728885695968\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_met_up_bdt\n",
      "TTJets_bkg 155.1371488545426\n",
      "WZJets_met_up_bdt\n",
      "WZJets 67.37052951377493\n",
      "STJets_met_up_bdt\n",
      "STJets 31.928266763321943\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_met_up_bdt\n",
      "TTJets_signal 354.9576694572058\n",
      "scale factor TTbar tau(h) QQ  0.9163804015139916 +- 0.07729238084006922\n",
      "scale factor MultiJet  0.7266067053310296 +- 0.007214172632178554\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_met_down_bdt\n",
      "TTJets_bkg 136.57343188463943\n",
      "WZJets_met_down_bdt\n",
      "WZJets 63.362859207928025\n",
      "STJets_met_down_bdt\n",
      "STJets 29.589529968337903\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_met_down_bdt\n",
      "TTJets_signal 342.5272666317852\n",
      "scale factor TTbar tau(h) QQ  0.9121222228996663 +- 0.07755431881890482\n",
      "scale factor MultiJet  0.7365356061156265 +- 0.006985128787764634\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_btag_up_bdt\n",
      "TTJets_bkg 145.14559104962692\n",
      "WZJets_centJER_btag_up_bdt\n",
      "WZJets 67.59199689998911\n",
      "STJets_centJER_btag_up_bdt\n",
      "STJets 30.735127309265387\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_btag_up_bdt\n",
      "TTJets_signal 351.3939923816229\n",
      "scale factor TTbar tau(h) QQ  0.8970466011707324 +- 0.07660478801690129\n",
      "scale factor MultiJet  0.7321346243295709 +- 0.007078211389828587\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_btag_down_bdt\n",
      "TTJets_bkg 141.27928862767718\n",
      "WZJets_centJER_btag_down_bdt\n",
      "WZJets 59.052741686785055\n",
      "STJets_centJER_btag_down_bdt\n",
      "STJets 29.58316668032922\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_btag_down_bdt\n",
      "TTJets_signal 342.6696857037947\n",
      "scale factor TTbar tau(h) QQ  0.9472435772021791 +- 0.07930292277411427\n",
      "scale factor MultiJet  0.733234451342091 +- 0.007145591114650575\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_trigger_up_bdt\n",
      "TTJets_bkg 147.0912275475032\n",
      "WZJets_centJER_trigger_up_bdt\n",
      "WZJets 65.13903922005662\n",
      "STJets_centJER_trigger_up_bdt\n",
      "STJets 30.997794333321472\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_trigger_up_bdt\n",
      "TTJets_signal 356.45835855142025\n",
      "scale factor TTbar tau(h) QQ  0.8861901800043589 +- 0.07552852843476421\n",
      "scale factor MultiJet  0.7320219617355871 +- 0.007079345486317415\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_trigger_down_bdt\n",
      "TTJets_bkg 139.50822772121663\n",
      "WZJets_centJER_trigger_down_bdt\n",
      "WZJets 61.585366107841715\n",
      "STJets_centJER_trigger_down_bdt\n",
      "STJets 29.3531353743561\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_trigger_down_bdt\n",
      "TTJets_signal 338.0150678323616\n",
      "scale factor TTbar tau(h) QQ  0.9578592908616802 +- 0.08036940835473012\n",
      "scale factor MultiJet  0.7333105105689458 +- 0.007143320118619915\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_xsec_up_bdt\n",
      "TTJets_bkg 151.98992340717786\n",
      "WZJets_centJER_xsec_up_bdt\n",
      "WZJets 66.36944844280481\n",
      "STJets_centJER_xsec_up_bdt\n",
      "STJets 32.146268011902755\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_xsec_up_bdt\n",
      "TTJets_signal 368.2944666114712\n",
      "scale factor TTbar tau(h) QQ  0.8472600249634797 +- 0.07278843676670706\n",
      "scale factor MultiJet  0.7311203425660547 +- 0.007049054486884301\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_xsec_down_bdt\n",
      "TTJets_bkg 134.51981726842175\n",
      "WZJets_centJER_xsec_down_bdt\n",
      "WZJets 60.316447427480085\n",
      "STJets_centJER_xsec_down_bdt\n",
      "STJets 28.11408902995513\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_xsec_down_bdt\n",
      "TTJets_signal 325.96176929980754\n",
      "scale factor TTbar tau(h) QQ  1.0055200182853785 +- 0.08369963179094235\n",
      "scale factor MultiJet  0.7342324567297807 +- 0.007174035066252781\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_pdf_up_bdt\n",
      "TTJets_bkg 156.77522541506033\n",
      "WZJets_centJER_bdt\n",
      "WZJets 63.342947935142455\n",
      "STJets_centJER_bdt\n",
      "STJets 30.165996274894944\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_pdf_up_bdt\n",
      "TTJets_signal 385.7961397702231\n",
      "scale factor TTbar tau(h) QQ  0.812587397747121 +- 0.06956405654527578\n",
      "scale factor MultiJet  0.7307968003755796 +- 0.0070569340452083015\n",
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_pdf_down_bdt\n",
      "TTJets_bkg 130.8952617732021\n",
      "WZJets_centJER_bdt\n",
      "WZJets 63.342947935142455\n",
      "STJets_centJER_bdt\n",
      "STJets 30.165996274894944\n",
      "QCD_bdt\n",
      "QCD 3803.0034445550423\n",
      "TTJets_signal_centJER_pdf_down_bdt\n",
      "TTJets_signal 311.7741075594946\n",
      "scale factor TTbar tau(h) QQ  1.045127011948263 +- 0.08738189785125423\n",
      "scale factor MultiJet  0.7343543841851622 +- 0.007163657255802784\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  343 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  344 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  345 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  346 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  347 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  348 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.228 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30052e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1068.79 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.51481e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.02977e-01   8.70698e-03   6.38690e-04   3.02554e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.583e-05 \n",
      " **********\n",
      " **  349 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  350 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  351 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1068.79 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.51471e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.02977e-01   8.70698e-03   1.27738e-04  -9.17438e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.583e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  352 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  353 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  354 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  355 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  356 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  357 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-505.515 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.29022e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.16 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.09968e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.03765e-01   8.75468e-03   6.40834e-04   2.93465e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.667e-05 \n",
      " **********\n",
      " **  358 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  359 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  360 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.16 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.09958e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.03765e-01   8.75468e-03   1.28167e-04  -9.14847e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.667e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  361 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  362 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  363 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  364 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  365 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  366 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-488.253 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30979e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1066.19 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.06339e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.01999e-01   8.64526e-03   6.36257e-04   2.94175e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.476e-05 \n",
      " **********\n",
      " **  367 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  368 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  369 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1066.19 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.0633e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.01999e-01   8.64526e-03   1.27251e-04  -9.20661e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.476e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  370 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  371 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  372 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  373 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  374 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  375 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-512.894 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.27986e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.82 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.37292e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.04731e-01   8.81689e-03   6.42845e-04   2.98167e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.776e-05 \n",
      " **********\n",
      " **  376 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  377 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  378 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.82 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.37282e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.04731e-01   8.81689e-03   1.28569e-04  -9.11686e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.776e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  379 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  380 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  381 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  382 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  383 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  384 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-481.449 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.31603e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1064.2 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=6.96656e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.01098e-01   8.60231e-03   6.35019e-04   2.92457e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.402e-05 \n",
      " **********\n",
      " **  385 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  386 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  387 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1064.2 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=6.96647e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.01098e-01   8.60231e-03   1.27004e-04  -9.23645e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.402e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  388 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  389 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  390 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  391 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  392 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  393 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-492.567 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30644e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1067.41 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.13636e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.02715e-01   8.67316e-03   6.36692e-04   2.95654e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.524e-05 \n",
      " **********\n",
      " **  394 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  395 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  396 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1067.41 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.13627e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.02715e-01   8.67316e-03   1.27338e-04  -9.18299e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.524e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  397 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  398 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  399 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  400 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  401 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  402 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-502.115 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.29414e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1070.68 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.05962e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.03209e-01   8.72866e-03   6.40320e-04   2.92812e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.621e-05 \n",
      " **********\n",
      " **  403 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  404 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  405 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1070.68 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.05952e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.03209e-01   8.72866e-03   1.28064e-04  -9.16672e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.621e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  406 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  407 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  408 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  409 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  410 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  411 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.196 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30276e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1070.6 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.10942e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.02717e-01   8.68680e-03   6.38573e-04   2.94634e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.548e-05 \n",
      " **********\n",
      " **  412 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  413 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  414 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1070.6 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.10932e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.02717e-01   8.68680e-03   1.27715e-04  -9.18294e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.548e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  415 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  416 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  417 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  418 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  419 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  420 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.056 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.29871e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1065.66 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.75396e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.03903e-01   8.73746e-03   6.37417e-04   3.07474e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.636e-05 \n",
      " **********\n",
      " **  421 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  422 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  423 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1065.66 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.75385e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.03903e-01   8.73746e-03   1.27483e-04  -9.14396e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.636e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  424 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  425 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  426 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  427 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  428 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  429 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-518.137 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.25939e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1067.76 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=5.96708e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.05316e-01   8.88294e-03   6.45290e-04   2.66899e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.893e-05 \n",
      " **********\n",
      " **  430 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  431 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  432 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1067.76 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=5.96699e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.05316e-01   8.88294e-03   1.29058e-04  -9.09778e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.893e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  433 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  434 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  435 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  436 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  437 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  438 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-478.896 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.34139e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1072.93 FROM MIGRAD    STATUS=CONVERGED      20 CALLS          21 TOTAL\n",
      "                     EDM=1.93426e-08    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.00347e-01   8.53210e-03   6.42477e-04   4.89702e-03\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.282e-05 \n",
      " **********\n",
      " **  439 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  440 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  441 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1072.93 FROM HESSE     STATUS=OK              5 CALLS          26 TOTAL\n",
      "                     EDM=1.93257e-08    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.00347e-01   8.53210e-03   1.28495e-04  -9.26141e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.282e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  442 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  443 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  444 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  445 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  446 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  447 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.101 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30226e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.75 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=8.40141e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.01698e-01   8.68470e-03   6.41161e-04   3.18955e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.544e-05 \n",
      " **********\n",
      " **  448 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  449 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  450 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.75 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=8.4013e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.01698e-01   8.68470e-03   1.28232e-04  -9.21655e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.544e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  451 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  452 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  453 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  454 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  455 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  456 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.33 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.29877e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1065.8 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=6.72055e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.04267e-01   8.72919e-03   6.36210e-04   2.86967e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.622e-05 \n",
      " **********\n",
      " **  457 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  458 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  459 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1065.8 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=6.72046e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.04267e-01   8.72919e-03   1.27242e-04  -9.13204e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.622e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  460 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  461 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  462 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  463 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  464 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  465 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.126 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30228e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.45 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=8.12877e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.01907e-01   8.68541e-03   6.40635e-04   3.13998e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.546e-05 \n",
      " **********\n",
      " **  466 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  467 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  468 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1071.45 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=8.12867e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.01907e-01   8.68541e-03   1.28127e-04  -9.20964e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.546e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  469 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  470 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  471 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  472 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  473 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  474 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.339 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.29878e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1066.21 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=6.96254e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.04021e-01   8.72791e-03   6.36808e-04   2.91826e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.620e-05 \n",
      " **********\n",
      " **  475 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  476 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  477 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1066.21 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=6.96245e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.04021e-01   8.72791e-03   1.27362e-04  -9.14009e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.620e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  478 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  479 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  480 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  481 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  482 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  483 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-497.692 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30310e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1074.25 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=8.79993e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.00903e-01   8.66859e-03   6.42814e-04   3.25901e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.517e-05 \n",
      " **********\n",
      " **  484 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  485 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  486 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1074.25 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=8.79982e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.00903e-01   8.66859e-03   1.28563e-04  -9.24292e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.517e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  487 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  488 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  489 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  490 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  491 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  492 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-496.771 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.29794e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1063.39 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=6.42311e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.05050e-01   8.74437e-03   6.34617e-04   2.80984e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.648e-05 \n",
      " **********\n",
      " **  493 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  494 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  495 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1063.39 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=6.42302e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.05050e-01   8.74437e-03   1.26923e-04  -9.10646e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.648e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  496 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  497 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  498 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  499 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  500 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  501 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-498.48 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.29913e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1072.9 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.65934e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.01365e-01   8.67766e-03   6.42113e-04   3.04347e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.532e-05 \n",
      " **********\n",
      " **  502 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  503 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  504 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1072.9 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.65924e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.01365e-01   8.67766e-03   1.28423e-04  -9.22759e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.532e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  505 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  506 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  507 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  508 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  509 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  510 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-496.258 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.30149e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1065 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=7.4433e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.04484e-01   8.73580e-03   6.35654e-04   3.02053e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.633e-05 \n",
      " **********\n",
      " **  511 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  512 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  513 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-1065 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=7.4432e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.04484e-01   8.73579e-03   1.27131e-04  -9.12494e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.633e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n"
     ]
    }
   ],
   "source": [
    "#importlib.reload(fit)\n",
    "\n",
    "syst=True\n",
    "\n",
    "sample_names = [\"Data\", \"TTJets_bkg\", \"WZJets\", \"STJets\", \"QCD\", \"TTJets_signal\"]\n",
    "sf_tt_sig, sf_qcd = fit.fit(\"histos/\" + \"bdt_nb\" + \".root\", sample_names, \"bdt\", corr=\"centJER\")\n",
    "sfs = {}\n",
    "sfs[\"TTJets_signal\"] = sf_tt_sig\n",
    "sfs[\"QCD\"] = sf_qcd\n",
    "#stack.plot( \"histos/\" + file_name + \".root\", var, sample_names[1:], sfs )\n",
    "\n",
    "if syst:\n",
    "\n",
    "    # PU - not applied\n",
    "    # JES/JER/TauScale/MET\n",
    "    for c in  [\"jes_up\", \"jes_down\", \"jes_up_old\", \"jes_down_old\", \"jer_up\", \"jer_down\", \"tau_eup\", \"tau_edown\",\n",
    "               \"met_up\", \"met_down\"]:\n",
    "        sf_tt_sig, sf_qcd = fit.fit(\"histos/\" + \"bdt_nb\" + \".root\", sample_names, \"bdt\", corr=c)     \n",
    "        sfs[\"TTJets_signal_\" + c] = sf_tt_sig\n",
    "        \n",
    "    # B-tagging, Trigger stat, XSEC theory, PDF\n",
    "    for c in [\"btag_up\", \"btag_down\", \"trigger_up\", \"trigger_down\", \"xsec_up\", \"xsec_down\", \"pdf_up\", \"pdf_down\"]:\n",
    "        sf_tt_sig, sf_qcd = fit.fit(\"histos/\" + \"bdt_nb\" + \".root\", sample_names, \"bdt\", corr = \"centJER_\" + c)     \n",
    "        sfs[\"TTJets_signal_\" + c] = sf_tt_sig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "significant-screening",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'TTJets_signal': 0.9214735847990575,\n",
       " 'QCD': 0.7326753274979056,\n",
       " 'TTJets_signal_jes_up': 0.9073829655543513,\n",
       " 'TTJets_signal_jes_down': 0.9379497171282354,\n",
       " 'TTJets_signal_jes_up_old': 0.9055324626482582,\n",
       " 'TTJets_signal_jes_down_old': 0.9433344245523222,\n",
       " 'TTJets_signal_jer_up': 0.926566087047167,\n",
       " 'TTJets_signal_jer_down': 0.9169003961745567,\n",
       " 'TTJets_signal_tau_eup': 0.9010504163419091,\n",
       " 'TTJets_signal_tau_edown': 0.9812991582128759,\n",
       " 'TTJets_signal_met_up': 0.9163804015139916,\n",
       " 'TTJets_signal_met_down': 0.9121222228996663,\n",
       " 'TTJets_signal_btag_up': 0.8970466011707324,\n",
       " 'TTJets_signal_btag_down': 0.9472435772021791,\n",
       " 'TTJets_signal_trigger_up': 0.8861901800043589,\n",
       " 'TTJets_signal_trigger_down': 0.9578592908616802,\n",
       " 'TTJets_signal_xsec_up': 0.8472600249634797,\n",
       " 'TTJets_signal_xsec_down': 1.0055200182853785,\n",
       " 'TTJets_signal_pdf_up': 0.812587397747121,\n",
       " 'TTJets_signal_pdf_down': 1.045127011948263}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "sized-rebound",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TTJets_signal 0.0\n",
      "TTJets_signal_jes_up 0.015291397905647961\n",
      "TTJets_signal_jes_down -0.01788020036707919\n",
      "TTJets_signal_jes_up_old 0.017299597529185355\n",
      "TTJets_signal_jes_down_old -0.023723783420261373\n",
      "TTJets_signal_jer_up -0.005526476647966024\n",
      "TTJets_signal_jer_down 0.0049629079986032425\n",
      "TTJets_signal_tau_eup 0.022163596215947993\n",
      "TTJets_signal_tau_edown -0.06492380725907015\n",
      "TTJets_signal_met_up 0.005527215721736146\n",
      "TTJets_signal_met_down 0.010148269091653289\n",
      "TTJets_signal_btag_up 0.026508609721733672\n",
      "TTJets_signal_btag_down -0.027966067425298124\n",
      "TTJets_signal_trigger_up 0.03829019667708948\n",
      "TTJets_signal_trigger_down -0.0394864341885147\n",
      "TTJets_signal_xsec_up 0.0805379134679821\n",
      "TTJets_signal_xsec_down -0.09120872792533573\n",
      "TTJets_signal_pdf_up 0.11816528313796533\n",
      "TTJets_signal_pdf_down -0.13419096237703887\n"
     ]
    }
   ],
   "source": [
    "for sample, sf in sfs.items():\n",
    "    if \"TTJets\" in sample:\n",
    "        print( sample, (sfs[\"TTJets_signal\"] - sf) / sfs[\"TTJets_signal\"] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "applied-orchestra",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "exceptional-lover",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dietary-consciousness",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "finite-luther",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "insured-soccer",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "finite-operation",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "existing-motivation",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "running-letters",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
