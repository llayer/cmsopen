{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "associate-interstate",
   "metadata": {},
   "source": [
    "## BDT training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "decimal-shoot",
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import importlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "magnetic-logging",
   "metadata": {},
   "outputs": [],
   "source": [
    "BASE_DIR = \"/eos/user/l/llayer/cmsopen/columnar/syst_variation/\"\n",
    "SAMPLES_DIR = BASE_DIR + \"samples\"\n",
    "CAND_DIR = BASE_DIR + \"cand\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fossil-observer",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "files = glob.glob( CAND_DIR + \"/*.h5\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "musical-banner",
   "metadata": {},
   "outputs": [],
   "source": [
    "#files = glob.glob( CAND_DIR + \"/*.h5\")\n",
    "samples = {}\n",
    "for sample in [\"Data\", \"QCD\", \"TTJets_centJER_signal\", \"TTJets_centJER_bkg\", \"STJets_centJER\", \"WZJets_centJER\"]:\n",
    "    #sample_name = sample.split(\"/\")[-1][:-3]\n",
    "    #print(sample_name)\n",
    "    samples[sample] = pd.read_hdf(CAND_DIR + \"/\" + sample + \".h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ranking-prisoner",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.20/06\n"
     ]
    }
   ],
   "source": [
    "import ml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "periodic-workstation",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set random state\n",
      "Prepare training data\n",
      "['Jet_pt', 'Jet_px', 'Jet_py', 'Jet_pz', 'Jet_e', 'Jet_eta', 'Jet_phi', 'Jet_mass', 'Jet_csvDisc', 'Jet_flavour', 'Tau_pt', 'Tau_px', 'Tau_py', 'Tau_pz', 'Tau_e', 'Tau_eta', 'Tau_phi', 'Tau_mass', 'Tau_charge', 'MET_pt', 'MET_px', 'MET_py', 'MET_pz', 'MET_e', 'MET_met', 'event', 'run', 'luminosityBlock', 'HLT_QuadJet40_IsoPFTau40', 'HLT_QuadJet45_IsoPFTau45', 'genEvent_tmeme', 'nJets', 'Jet_nbtags', 'ht', 'aplanarity', 'sphericity', 'chargeEta', 'met', 'deltaPhiTauMet', 'mt', 'mTauJet', 'Jet_btagSF', 'Jet_btagSF_up', 'Jet_btagSF_down', 'Jet_beff', 'Jet_btag_weight1', 'Jet_btag_weight1_up', 'Jet_btag_weight1_down', 'trigger_weight', 'trigger_weight_up', 'trigger_weight_down', 'norm', 'norm_up', 'norm_down', 'pdf', 'pdf_up', 'pdf_down', 'train_flag', 'label', 'bdt', 'weight']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:91: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  signal_train[\"weights\"] = signal_train['trigger_weight'] * signal_train['Jet_btag_weight1']\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:92: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  signal_train[\"weights\"] = signal_train[\"weights\"] * (1. / np.mean(signal_train[\"weights\"]))\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:95: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  bkg_train[\"weights\"] = bkg_train['btag_weight']\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:96: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  bkg_train[\"weights\"] = bkg_train[\"weights\"] * (1. / np.mean(bkg_train[\"weights\"]))\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:99: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  train_data = pd.concat([signal_train, bkg_train], axis=0)\n",
      "/eos/home-l/llayer/cmsopen/columnar/ml.py:100: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  test_data = pd.concat([signal_test, bkg_test], axis=0)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train model\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_97apython3/x86_64-centos7-gcc8-opt/lib/python3.7/site-packages/xgboost/core.py:587: FutureWarning: Series.base is deprecated and will be removed in a future version\n",
      "  if getattr(data, 'base', None) is not None and \\\n",
      "/cvmfs/sft.cern.ch/lcg/views/LCG_97apython3/x86_64-centos7-gcc8-opt/lib/python3.7/site-packages/xgboost/core.py:588: FutureWarning: Series.base is deprecated and will be removed in a future version\n",
      "  data.base is not None and isinstance(data, np.ndarray) \\\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicting...\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "importlib.reload(ml)\n",
    "ml.train(samples, \".\", n_sig=5000, n_bkg=5000, ntrees=500, lr=0.01, random_state=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "linear-timer",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "cutting-asset",
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = [\n",
    "    {\"var_name\" : \"bdt\", \"bins\" : 20, \"xlow\" : 0., \"xup\" : 1., \"xtitle\" : \"bdt\"}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "digital-florist",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data bdt None\n",
      "QCD bdt None\n",
      "Change name\n",
      "TTJets_signal_centJER\n",
      "TTJets_signal_centJER bdt None\n",
      "1.1289083129478867 347.16588084351883 347.1658808435188\n",
      "Change name\n",
      "TTJets_bkg_centJER\n",
      "TTJets_bkg_centJER bdt None\n",
      "STJets_centJER bdt None\n",
      "WZJets_centJER bdt None\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/eos/home-l/llayer/cmsopen/columnar/plot.py:30: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  sample['weight'] = sample['btag_weight'] * scale_qcd\n"
     ]
    }
   ],
   "source": [
    "importlib.reload(plot)\n",
    "plot.vars_to_histos(samples, variables, \"histos.root\", syst=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "buried-samoa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "greek-montgomery",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TFile**\t\thistos.root\t\n",
      " TFile*\t\thistos.root\t\n",
      "  KEY: TH1D\tData_bdt;1\tData_bdt\n",
      "  KEY: TH1D\tQCD_bdt;1\tQCD_bdt\n",
      "  KEY: TH1D\tTTJets_signal_centJER_bdt;1\tTTJets_signal_centJER_bdt\n",
      "  KEY: TH1D\tTTJets_bkg_centJER_bdt;1\tTTJets_bkg_centJER_bdt\n",
      "  KEY: TH1D\tSTJets_centJER_bdt;1\tSTJets_centJER_bdt\n",
      "  KEY: TH1D\tWZJets_centJER_bdt;1\tWZJets_centJER_bdt\n"
     ]
    }
   ],
   "source": [
    "f = ROOT.TFile(\"histos.root\")\n",
    "f.ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "divine-increase",
   "metadata": {},
   "outputs": [],
   "source": [
    "import fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "economic-appeal",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data_bdt\n",
      "Data 3343.0\n",
      "TTJets_bkg_centJER_bdt\n",
      "TTJets_bkg 143.36512967476312\n",
      "WZJets_centJER_bdt\n",
      "WZJets 63.73465056276218\n",
      "STJets_centJER_bdt\n",
      "STJets 30.22478553713197\n",
      "QCD_bdt\n",
      "QCD 2631.8428087996012\n",
      "TTJets_signal_centJER_bdt\n",
      "TTJets_signal 347.16588084351883\n",
      "scale factor TTbar tau(h) QQ  0.9370326561829222 +- 0.07734053173950257\n",
      "scale factor MultiJet  1.0564345474837076 +- 0.010201974729067113\n",
      "[#1] INFO:DataHandling -- RooDataHist::adjustBinning(signal): fit range of variable x expanded to nearest bin boundaries: [0,350] --> [0,1]\n",
      "[#0] WARNING:InputArguments -- RooAbsPdf::fitTo(pdf) WARNING: a likelihood fit is requested of what appears to be weighted data.\n",
      "       While the estimated values of the parameters will always be calculated taking the weights into account,\n",
      "       there are multiple ways to estimate the errors of the parameters. You are advised to make an \n",
      "       explicit choice for the error calculation:\n",
      "           - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix\n",
      "             (error will be proportional to the number of events in MC).\n",
      "           - Or provide SumW2Error(false), to return errors from original HESSE error matrix\n",
      "             (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).\n",
      "           - Or provide AsymptoticError(true), to use the asymptotically correct expression\n",
      "             (for details see https://arxiv.org/abs/1911.01303).\n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: activating const optimization\n",
      "[#1] INFO:Minization --  The following expressions have been identified as constant and will be precalculated and cached: (signal,bkg)\n",
      " **********\n",
      " **  154 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  155 **SET NOGRAD\n",
      " **********\n",
      " PARAMETER DEFINITIONS:\n",
      "    NO.   NAME         VALUE      STEP SIZE      LIMITS\n",
      "     1 c0           5.00000e-01  1.00000e-01    0.00000e+00  1.00000e+00\n",
      " **********\n",
      " **  156 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  157 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  158 **SET STR           1\n",
      " **********\n",
      " NOW USING STRATEGY  1: TRY TO BALANCE SPEED AGAINST RELIABILITY\n",
      " **********\n",
      " **  159 **MIGRAD         500           1\n",
      " **********\n",
      " FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.\n",
      " START MIGRAD MINIMIZATION.  STRATEGY  1.  CONVERGENCE WHEN EDM .LT. 1.00e-03\n",
      " FCN=-293.605 FROM MIGRAD    STATUS=INITIATE        4 CALLS           5 TOTAL\n",
      "                     EDM= unknown      STRATEGY= 1      NO ERROR MATRIX       \n",
      "  EXT PARAMETER               CURRENT GUESS       STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           5.00000e-01   1.00000e-01   2.01358e-01   1.28503e+03\n",
      "                               ERR DEF= 0.5\n",
      " MIGRAD MINIMIZATION HAS CONVERGED.\n",
      " MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-858.877 FROM MIGRAD    STATUS=CONVERGED      17 CALLS          18 TOTAL\n",
      "                     EDM=1.60579e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                   STEP         FIRST   \n",
      "  NO.   NAME      VALUE            ERROR          SIZE      DERIVATIVE \n",
      "   1  c0           1.04746e-01   8.64546e-03   5.67299e-04   1.41919e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.476e-05 \n",
      " **********\n",
      " **  160 **SET ERR         0.5\n",
      " **********\n",
      " **********\n",
      " **  161 **SET PRINT           1\n",
      " **********\n",
      " **********\n",
      " **  162 **HESSE         500\n",
      " **********\n",
      " COVARIANCE MATRIX CALCULATED SUCCESSFULLY\n",
      " FCN=-858.877 FROM HESSE     STATUS=OK              5 CALLS          23 TOTAL\n",
      "                     EDM=1.60577e-05    STRATEGY= 1      ERROR MATRIX ACCURATE \n",
      "  EXT PARAMETER                                INTERNAL      INTERNAL  \n",
      "  NO.   NAME      VALUE            ERROR       STEP SIZE       VALUE   \n",
      "   1  c0           1.04746e-01   8.64546e-03   1.13460e-04  -9.11639e-01\n",
      "                               ERR DEF= 0.5\n",
      " EXTERNAL ERROR MATRIX.    NDIM=  25    NPAR=  1    ERR DEF=0.5\n",
      "  7.476e-05 \n",
      "[#1] INFO:Minization -- RooMinimizer::optimizeConst: deactivating const optimization\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n"
     ]
    }
   ],
   "source": [
    "sample_names = [\"Data\", \"TTJets_bkg\", \"WZJets\", \"STJets\", \"QCD\", \"TTJets_signal\"]\n",
    "sf_tt_sig, sf_qcd = fit.fit(\"histos.root\", sample_names, \"bdt\", corr=\"centJER\")\n",
    "sfs = {}\n",
    "sfs[\"TTJets_signal\"] = sf_tt_sig\n",
    "sfs[\"QCD\"] = sf_qcd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "wanted-bride",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "collective-response",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "stainless-manner",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
