{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "superb-principal",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import selection\n",
    "import weights\n",
    "import btag\n",
    "import root_pandas\n",
    "import importlib\n",
    "import jetmet\n",
    "import hl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "accepting-spine",
   "metadata": {},
   "outputs": [],
   "source": [
    "mc = ['TTJets']\n",
    "corrections = [\"jes_up\", \"jes_down\", \"tau_eup\", \"tau_edown\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "functioning-stylus",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing: TTJets.root isData: False isTT: True corrLevel cent\n",
      "Processing: TTJets.root isData: False isTT: True corrLevel jes_up\n",
      "SF 1.1 0.9\n",
      "JESUP\n",
      "Processing: TTJets.root isData: False isTT: True corrLevel jes_down\n",
      "SF 1.1 0.9\n",
      "Processing: TTJets.root isData: False isTT: True corrLevel tau_eup\n",
      "SF 1.0 1.0\n",
      "Processing: TTJets.root isData: False isTT: True corrLevel tau_edown\n",
      "SF 1.0 1.0\n"
     ]
    }
   ],
   "source": [
    "importlib.reload(selection)\n",
    "importlib.reload(jetmet)\n",
    "def event_selection():\n",
    "    \n",
    "    samples = {}\n",
    "    for sample in mc:\n",
    "        \n",
    "        #!!!!!!! Careful with JER application before Tau?!\n",
    "        \n",
    "        if \"TTJets\" in sample: isTT = True\n",
    "        else: isTT = False\n",
    "            \n",
    "        if \"Run2011\" in sample: isData = True\n",
    "        else: isData = False\n",
    "        \n",
    "        path = \"/eos/user/l/llayer/opendata_files/preselection_merged/\" + sample + \".root\"\n",
    "        \n",
    "        df, cut_flow = selection.event_selection(path, isData = isData, isTT = isTT)\n",
    "    \n",
    "        samples[sample + \"_cent\"] = df\n",
    "        \n",
    "        if isData == False:\n",
    "            \n",
    "            for c in corrections:\n",
    "                df, cut_flow = selection.event_selection(path, isData = isData, isTT = isTT, corrLevel = c,\n",
    "                                                        tau_factor = 0.1, jes_factor = 0.1)\n",
    "                samples[sample + \"_\" + c] = df\n",
    "        \n",
    "        \n",
    "    return samples\n",
    "\n",
    "samples = event_selection()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "conventional-research",
   "metadata": {},
   "outputs": [],
   "source": [
    "def candidates(sample, df, invert_btag = False, njets=-1, scale_met=None, isData=False):\n",
    "\n",
    "    df['nJets'] = df[\"Jet_pt\"].str.len()\n",
    "    \n",
    "    # b-tagging\n",
    "    df[\"Jet_nbtags\"] = df[\"Jet_csvDisc\"].apply( lambda x : btag.count_btags(x, njets=njets) )\n",
    "    if invert_btag:\n",
    "        df = btag.no_tag(df)\n",
    "    else:\n",
    "        df = btag.at_least_1tag(df)\n",
    "\n",
    "    # MET cut\n",
    "    if scale_met != None:\n",
    "        df['MET_met'] = df['MET_met'] * scale_met\n",
    "    df = selection.met_requirement(df)\n",
    "\n",
    "    \n",
    "    # HL features\n",
    "    df = pd.concat([df, df.apply(lambda ev : pd.Series(hl.hlFeatures(ev, njets=njets)), axis=1)], axis=1)\n",
    "    \n",
    "\n",
    "    # MC weights\n",
    "    if not isData:\n",
    "\n",
    "        hlt_40, hlt_45 = weights.lumi()\n",
    "        total_lumi = hlt_40 + hlt_45\n",
    "        trigger_frac = hlt_40 / float(hlt_45)\n",
    "        df = pd.concat([df, df.apply(lambda ev: pd.Series(btag.eval_sf_eff(ev)), axis=1)], axis=1)\n",
    "        df[\"Jet_btag_weight1\"] = df.apply(lambda ev : btag.b_weight_method1(ev, njets=njets), axis=1)\n",
    "        #if (key == \"central\") | (key == \"centJER\"):\n",
    "        #    df[\"Jet_btag_weight1_up\"] = df.apply(lambda ev : btag.b_weight_method1(ev, syst='up', njets=njets), axis=1)\n",
    "        #    df[\"Jet_btag_weight1_down\"] = df.apply(lambda ev : btag.b_weight_method1(ev, syst='down', njets=njets), axis=1)\n",
    "        #df[\"Jet_btag_weight2\"] = df.apply(lambda ev : btag.b_weight_method2(ev, njets=njets), axis=1)\n",
    "        # trigger weights\n",
    "        #df[\"trigger_weight\"] = df.apply(lambda ev : weights.trigger_weight(ev, trigger_frac), axis=1)\n",
    "        df = pd.concat([df, df.apply(lambda ev: pd.Series(weights.trigger_weight(ev, trigger_frac)), axis=1)], axis=1)\n",
    "        # normalization\n",
    "        counts_path = \"/eos/user/l/llayer/opendata_files/preselection_merged/\" + sample + \"_counts.root\"\n",
    "        total_counts = root_pandas.read_root(counts_path)\n",
    "        xsec = weights.get_xsec(sample)\n",
    "        weights.norm(df, total_counts, xsec, lumi = total_lumi)\n",
    "        \n",
    "        # PDF\n",
    "        #if (\"TTJets\" in sample) & (key == \"centJER\"):\n",
    "        #    pdf = pd.read_hdf(\"TTJets_pdfweights.h5\")\n",
    "        #    df = pd.merge(df, pdf, how=\"left\", on=[\"event\", \"luminosityBlock\", \"run\"])\n",
    "\n",
    "    # QCD\n",
    "    if isData & invert_btag:\n",
    "        \n",
    "        # Assume light flavour\n",
    "        def lf(nJets):\n",
    "            return np.zeros((nJets))\n",
    "        df[\"Jet_flavour\"] = df[\"nJets\"].apply(lf)\n",
    "        df = pd.concat([df, df.apply(lambda ev: pd.Series(btag.eval_sf_eff(ev)), axis=1)], axis=1)\n",
    "        df[\"btag_weight\"] = df.apply(lambda ev : btag.b_weight_method2(ev, njets=njets), axis=1)\n",
    "        \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "powerful-composition",
   "metadata": {},
   "outputs": [],
   "source": [
    "def proc_candidates(samples, njets = -1):\n",
    "    \n",
    "    cand_samples = {}    \n",
    "    \n",
    "    for sample in mc:\n",
    "        for key in [\"cent\"] + corrections:\n",
    "            print( sample + \"_\" + key )\n",
    "            df = samples[sample + \"_\" + key]\n",
    "            cand_samples[sample + \"_\" + key] = candidates(sample, df)  \n",
    "\n",
    "    #new_samples = rearrange_samples(cand_samples)\n",
    "    return cand_samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "protected-principal",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TTJets_cent\n",
      "TTJets_jes_up\n",
      "TTJets_jes_down\n",
      "TTJets_tau_eup\n",
      "TTJets_tau_edown\n"
     ]
    }
   ],
   "source": [
    "cands = proc_candidates(samples)\n",
    "#print(cands)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "suited-injury",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['ht', 'aplanarity', 'sphericity', 'chargeEta', 'met', 'deltaPhiTauMet', 'mt', 'mTauJet']\n",
    "for sample in cands:\n",
    "    cands[sample][\"bdt\"] = bdt.predict_proba(cands[sample][features].values)[:,0]    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "formal-audit",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "loving-gates",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "favorite-clarity",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plot\n",
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "original-invitation",
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = [\n",
    "    {\"var_name\" : \"bdt\", \"bins\" : 15, \"xlow\" : 0., \"xup\" : 1., \"xtitle\" : \"bdt\"}\n",
    "    #{\"var_name\" : \"MET_met\", \"bins\" : 30, \"xlow\" : 0., \"xup\" : 400, \"xtitle\" : \"MET [GeV]\"}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "third-assets",
   "metadata": {},
   "outputs": [],
   "source": [
    "def vars_to_histos(samples, variables):\n",
    "    file = ROOT.TFile(\"test_histos.root\", 'recreate')\n",
    "    for name, sample in samples.items():\n",
    "        for var in variables:\n",
    "            plot.save_var(sample, name, var[\"var_name\"], var[\"bins\"], var[\"xlow\"], var[\"xup\"])\n",
    "    file.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "limited-pendant",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TTJets_cent bdt None\n",
      "TTJets_jes_up bdt None\n",
      "TTJets_jes_down bdt None\n",
      "TTJets_tau_eup bdt None\n",
      "TTJets_tau_edown bdt None\n"
     ]
    }
   ],
   "source": [
    "vars_to_histos(cands, variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "structural-perfume",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = ROOT.TFile(\"test_histos.root\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "painful-stamp",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TFile**\t\ttest_histos.root\t\n",
      " TFile*\t\ttest_histos.root\t\n",
      "  KEY: TH1D\tTTJets_cent_bdt;1\tTTJets_cent_bdt\n",
      "  KEY: TH1D\tTTJets_jes_up_bdt;1\tTTJets_jes_up_bdt\n",
      "  KEY: TH1D\tTTJets_jes_down_bdt;1\tTTJets_jes_down_bdt\n",
      "  KEY: TH1D\tTTJets_tau_eup_bdt;1\tTTJets_tau_eup_bdt\n",
      "  KEY: TH1D\tTTJets_tau_edown_bdt;1\tTTJets_tau_edown_bdt\n"
     ]
    }
   ],
   "source": [
    "f.ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "exclusive-rider",
   "metadata": {},
   "outputs": [],
   "source": [
    "var = variables[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "dietary-quick",
   "metadata": {},
   "outputs": [],
   "source": [
    "hist_cent = f.Get(\"TTJets\" + \"_cent_\" + var[\"var_name\"])\n",
    "hist_jes_up = f.Get(\"TTJets\" + \"_jes_up_\" + var[\"var_name\"])\n",
    "hist_jes_down = f.Get(\"TTJets\" + \"_jes_down_\" + var[\"var_name\"])\n",
    "hist_tau_eup = f.Get(\"TTJets\" + \"_tau_eup_\" + var[\"var_name\"])\n",
    "hist_tau_edown = f.Get(\"TTJets\" + \"_tau_edown_\" + var[\"var_name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "western-function",
   "metadata": {},
   "outputs": [],
   "source": [
    "#up = hist_jes_up\n",
    "#down = hist_jes_down\n",
    "cent = hist_cent\n",
    "up = hist_tau_eup\n",
    "down = hist_tau_edown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "serious-bumper",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TH1D::Sumw2>: Sum of squares of weights structure already created\n",
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ROOT.gStyle.SetOptStat(0)\n",
    "\n",
    "ratio_up = plot.createRatio(up, cent)\n",
    "ratio_down = plot.createRatio(down, cent)\n",
    "\n",
    "c, pad1, pad2 = plot.createCanvasPads()\n",
    "\n",
    "# draw everything\n",
    "pad1.cd()\n",
    "cent.Draw()\n",
    "up.Draw(\"SAME\")\n",
    "up.SetLineColor(ROOT.kRed+2)\n",
    "down.Draw(\"SAME\")\n",
    "down.SetLineColor(ROOT.kGreen+2)\n",
    "\n",
    "cent.SetTitle(\"MET\")\n",
    "leg = ROOT.TLegend(0.6, 0.65, .8, .89);\n",
    "leg.AddEntry(cent, \"central\", \"l\");\n",
    "leg.AddEntry(up, \"up\", \"l\");\n",
    "leg.AddEntry(down, \"down\", \"l\");\n",
    "leg.SetBorderSize(0)\n",
    "leg.Draw(\"SAME\")\n",
    "\n",
    "pad2.cd()\n",
    "ratio_up.Draw(\"ep\")\n",
    "ratio_up.SetLineColor(ROOT.kRed+2)\n",
    "ratio_up.SetMarkerColor(ROOT.kRed+2)\n",
    "ratio_down.Draw(\"epSAME\")    \n",
    "ratio_down.SetMarkerColor(ROOT.kGreen+2)\n",
    "ratio_down.SetLineColor(ROOT.kGreen+2)\n",
    "ratio_down.GetXaxis().SetTitle(var[\"xtitle\"])\n",
    "\n",
    "f1 = ROOT.TLine(0, 1., 1,1.)\n",
    "f1.SetLineColor(ROOT.kBlack)\n",
    "f1.SetLineStyle(ROOT.kDashed)\n",
    "f1.Draw(\"same\")\n",
    "\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "dress-recruitment",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "mexican-garbage",
   "metadata": {},
   "outputs": [],
   "source": [
    "bdt = pickle.load(open(\"bdt/xgb.pkl\", \"rb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sustained-cyprus",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bulgarian-school",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "civil-broad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
